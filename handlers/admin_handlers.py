import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext
from sqlalchemy import update

from filters.chat_type import ChatTypeFilter, IsAdmin
from database.dao import DAO
from keyboard.reply import admin_edit_kb, mailing_kb, gaz_kb
from states_fsm import (AdminAddFAQ,
                        AdminAddEvent,
                        AdminAddPerson,
                        AdminEditEvent,
                        AdminEditFAQ,
                        AdminEditPerson,
                        AdminMailing,
                        AdminDeleteFAQ)  # –î–æ–±–∞–≤—å—Ç–µ AdminDeleteFAQ –≤ states_fsm.py

from keyboard.inline import get_admin_pagination_kb, faq_admin_kb
from database.engine import async_session_maker
from aiogram.fsm.state import State, StatesGroup


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


WELCOME_TEXT = (
    "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–µ–º, –ë–æ—Å—Å?"
)

ADMINS_LIST = [922109605, 297648299, 8154592734, 816800090, 778706249]


@admin_router.message(CommandStart())
async def user_start_cmd(message: types.Message):
    await message.answer(
        WELCOME_TEXT,
        reply_markup=admin_edit_kb
    )


# ====== –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ======
@admin_router.message(F.text == "üì• –†–∞—Å—Å—ã–ª–∫–∞")
async def start_mailing(message: types.Message, state: FSMContext):
    await state.set_state(AdminMailing.content_type)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å, –∫—Ä—É–∂–æ–∫ –∏ —Ç.–¥.)")


@admin_router.message(AdminMailing.content_type)
async def collect_content(message: types.Message, state: FSMContext):
    content = {}
    if message.text:
        content['type'] = 'text'
        content['data'] = message.text
    elif message.photo:
        content['type'] = 'photo'
        content['data'] = message.photo[-1].file_id
        content['caption'] = message.caption
    elif message.video:
        content['type'] = 'video'
        content['data'] = message.video.file_id
        content['caption'] = message.caption
    elif message.voice:
        content['type'] = 'voice'
        content['data'] = message.voice.file_id
    elif message.video_note:
        content['type'] = 'video_note'
        content['data'] = message.video_note.file_id
    else:
        await message.answer("–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(content=content)
    await state.set_state(AdminMailing.confirm_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=mailing_kb)


@admin_router.message(AdminMailing.confirm_type)
async def choose_mailing_type(message: types.Message, state: FSMContext):
    data = await state.get_data()
    content = data.get('content')
    ADMINS_LIST = [922109605, 297648299, 8154592734, 816800090, 778706249]  
    if message.text == "–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞":
        sent = 0
        for admin_id in ADMINS_LIST:
            try:
                await send_content(message.bot, admin_id, content)
                sent += 1
            except Exception:
                pass
        await state.clear()
        await return_admin_keyboard(message, f"–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –∞–¥–º–∏–Ω–∞–º.")
    elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å–µ—Ö":
        await state.set_state(AdminMailing.confirm_all)
        await message.answer("–¢–æ—á–Ω–æ –ø—Ä—è–º –≤—Å–µ–º-–≤—Å–µ–º —Ä–∞—Å—Å—ã–ª–∞–µ–º?", reply_markup=gaz_kb)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")


@admin_router.message(AdminMailing.confirm_all)
async def confirm_and_send_all(message: types.Message, state: FSMContext):
    if message.text != "–ü–æ–ª–µ—Ç–µ–ª–∏ üöÄ":
        await state.clear()
        await return_admin_keyboard(message, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    data = await state.get_data()
    content = data.get('content')
    from database.engine import async_session_maker
    from database.dao import DAO
    async with async_session_maker() as session:
        dao = DAO(session)
        users = await dao.session.execute(dao.session.query(dao.session.bind.classes.Users.tg_id))
        user_ids = [row[0] for row in users.fetchall()]
    sent = 0
    for user_id in user_ids:
        try:
            await send_content(message.bot, user_id, content)
            sent += 1
        except Exception:
            pass
    await state.clear()
    await return_admin_keyboard(message, f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –∏–∑ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def send_content(bot, user_id, content):
    if content['type'] == 'text':
        await bot.send_message(user_id, content['data'])
    elif content['type'] == 'photo':
        await bot.send_photo(user_id, content['data'], caption=content.get('caption'))
    elif content['type'] == 'video':
        await bot.send_video(user_id, content['data'], caption=content.get('caption'))
    elif content['type'] == 'voice':
        await bot.send_voice(user_id, content['data'])
    elif content['type'] == 'video_note':
        await bot.send_video_note(user_id, content['data'])


# ====== –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ======
@admin_router.message(F.text == "‚úèÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
async def show_events(message: types.Message):

    async with async_session_maker() as session:
        dao = DAO(session)
        events = await dao.get_all_events()
        if not events:
            await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ù–∞–∂–º–∏—Ç–µ ‚ûï —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.", reply_markup=get_admin_pagination_kb('event'))
            return
        event = events[0]
        caption = f"<b>{event.title}</b>\n{event.description}\nüìÖ {event.date.strftime('%d.%m.%Y %H:%M')}\nüìç {event.location}"
        if getattr(event, 'file_id', None):
            await message.answer_photo(
                event.file_id,
                caption=caption,
                reply_markup=get_admin_pagination_kb('event', event.id),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                caption,
                reply_markup=get_admin_pagination_kb('event', event.id),
                parse_mode="HTML"
            )


# ====== –ü–∞–≥–∏–Ω–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ======
@admin_router.callback_query(F.data.startswith("event_prev"))
async def event_prev_page(callback: types.CallbackQuery, state: FSMContext):

    async with async_session_maker() as session:
        dao = DAO(session)
        events = await dao.get_all_events()
        if not events:
            await callback.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return
        current_id = None

        if callback.message.reply_markup and callback.message.reply_markup.inline_keyboard:
            for row in callback.message.reply_markup.inline_keyboard:
                for btn in row:
                    if btn.callback_data and btn.callback_data.startswith("event_edit_"):
                        try:
                            current_id = int(btn.callback_data.split('_')[-1])
                        except:
                            pass
        idx = next((i for i, e in enumerate(events) if e.id == current_id), 0)
        prev_idx = (idx - 1) % len(events)
        event = events[prev_idx]
        from aiogram.types import InputMediaPhoto
        try:
            if getattr(event, 'file_id', None):
                caption = f"<b>{event.title}</b>\n{event.description}\nüìÖ {event.date.strftime('%d.%m.%Y %H:%M')}\nüìç {event.location}"
                await callback.message.edit_media(
                    InputMediaPhoto(media=event.file_id, caption=caption, parse_mode="HTML"),
                    reply_markup=get_admin_pagination_kb('event', event.id)
                )
            else:
                await callback.message.edit_text(
                    f"<b>{event.title}</b>\n{event.description}\nüìÖ {event.date.strftime('%d.%m.%Y %H:%M')}\nüìç {event.location}",
                    reply_markup=get_admin_pagination_kb('event', event.id),
                    parse_mode="HTML"
                )
        except Exception as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise
        await callback.answer()


@admin_router.callback_query(F.data.startswith("event_next"))
async def event_next_page(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        events = await dao.get_all_events()
        if not events:
            await callback.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return
        current_id = None
        if callback.message.reply_markup and callback.message.reply_markup.inline_keyboard:
            for row in callback.message.reply_markup.inline_keyboard:
                for btn in row:
                    if btn.callback_data and btn.callback_data.startswith("event_edit_"):
                        try:
                            current_id = int(btn.callback_data.split('_')[-1])
                        except Exception:
                            pass
        idx = next((i for i, e in enumerate(events) if e.id == current_id), 0)
        next_idx = (idx + 1) % len(events)
        event = events[next_idx]
        from aiogram.types import InputMediaPhoto
        try:
            if getattr(event, 'file_id', None):
                caption = f"<b>{event.title}</b>\n{event.description}\nüìÖ {event.date.strftime('%d.%m.%Y %H:%M')}\nüìç {event.location}"
                await callback.message.edit_media(
                    InputMediaPhoto(media=event.file_id, caption=caption, parse_mode="HTML"),
                    reply_markup=get_admin_pagination_kb('event', event.id)
                )
            else:
                await callback.message.edit_text(
                    f"<b>{event.title}</b>\n{event.description}\nüìÖ {event.date.strftime('%d.%m.%Y %H:%M')}\nüìç {event.location}",
                    reply_markup=get_admin_pagination_kb('event', event.id),
                    parse_mode="HTML"
                )
        except Exception as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise
        await callback.answer()


# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ======
@admin_router.callback_query(F.data == "event_add")
async def event_add_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminAddEvent.title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await callback.answer()


@admin_router.message(AdminAddEvent.title)
async def event_add_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AdminAddEvent.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@admin_router.message(AdminAddEvent.description)
async def event_add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AdminAddEvent.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 27.08.2025 18:00):")


@admin_router.message(AdminAddEvent.date)
async def event_add_date(message: types.Message, state: FSMContext):
    from datetime import datetime
    try:
        date = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 27.08.2025 18:00")
        return
    await state.update_data(date=date)
    await state.set_state(AdminAddEvent.location)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")


@admin_router.message(AdminAddEvent.location)
async def event_add_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(AdminAddEvent.file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª/—Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")


def return_admin_keyboard(message, text):
    from keyboard.reply import admin_edit_kb
    return message.answer(text, reply_markup=admin_edit_kb)


@admin_router.message(AdminAddEvent.file_id)
async def event_add_file(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if message.text and message.text.strip().lower() in ["–æ—Ç–º–µ–Ω–∞", "–Ω–∞–∑–∞–¥"]:
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_edit_kb)
        return
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    await state.update_data(file_id=file_id)
    event_data = await state.get_data()
    async with async_session_maker() as session:
        dao = DAO(session)
        event_data['created_by'] = message.from_user.id
        await dao.add_event(**event_data)
    await state.clear()
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üéâ", reply_markup=admin_edit_kb)
@admin_router.message(F.text.regexp(r"^(–û—Ç–º–µ–Ω–∞|–ù–∞–∑–∞–¥)$"))
async def fsm_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_edit_kb)


@admin_router.message(AdminEditEvent.title)
async def event_edit_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AdminEditEvent.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")


@admin_router.message(AdminEditEvent.description)
async def event_edit_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AdminEditEvent.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:")


@admin_router.message(AdminEditEvent.date)
async def event_edit_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await state.set_state(AdminEditEvent.location)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ:")


@admin_router.message(AdminEditEvent.location)
async def event_edit_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(AdminEditEvent.file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª/—Ñ–æ—Ç–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@admin_router.message(AdminEditEvent.file_id)
async def event_edit_file(message: types.Message, state: FSMContext):
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    await state.update_data(file_id=file_id)
    await state.set_state(AdminEditEvent.created_by)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π user_id (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@admin_router.message(AdminEditEvent.created_by)
async def event_edit_created_by(message: types.Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get('event_id')
    update_data = {k: v for k, v in data.items() if k != 'event_id'}

    async with async_session_maker() as session:
        await session.execute(
            update(session.bind.classes.Event)
            .where(session.bind.classes.Event.id == event_id)
            .values(**update_data)
        )
        await session.commit()
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ‚úèÔ∏è")
    await state.clear()


# ====== –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ======
@admin_router.callback_query(F.data.startswith("event_delete_"))
async def event_delete(callback: types.CallbackQuery):

    async with async_session_maker() as session:
        dao = DAO(session)
        event_id = int(callback.data.split('_')[-1])
        await dao.delete_event(event_id)
        try:
            await callback.message.edit_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ! üóëÔ∏è")
        except Exception as e:
            if "there is no text in the message to edit" in str(e):
                await callback.message.delete()
                await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ! üóëÔ∏è")
            else:
                raise
        await callback.answer()


# ====== –õ—é–¥–∏: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ======
@admin_router.message(F.text == "‚úèÔ∏è –õ—é–¥–∏")
async def show_persons(message: types.Message):

    async with async_session_maker() as session:
        dao = DAO(session)
        persons = await dao.get_all_persons()
        if not persons:
            await message.answer("–ù–µ—Ç –ª—é–¥–µ–π. –ù–∞–∂–º–∏—Ç–µ ‚ûï —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.", reply_markup=get_admin_pagination_kb('person'))
            return
        person = persons[0]
        caption = f"<b>{person.last_name} {person.first_name}</b>\n{person.position or ''}\n‚òéÔ∏è {person.contact or '‚Äî'}"
        if person.file_id:
            await message.answer_photo(person.file_id, caption=caption, reply_markup=get_admin_pagination_kb('person', person.id), parse_mode="HTML")
        else:
            await message.answer(caption, reply_markup=get_admin_pagination_kb('person', person.id), parse_mode="HTML")


# ====== –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ª—é–¥–µ–π ======
@admin_router.callback_query(F.data.startswith("person_prev"))
async def person_prev_page(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        persons = await dao.get_all_persons()
        if not persons:
            await callback.answer("–ù–µ—Ç –ª—é–¥–µ–π.")
            return
        current_id = None
        if callback.message.reply_markup and callback.message.reply_markup.inline_keyboard:
            for row in callback.message.reply_markup.inline_keyboard:
                for btn in row:
                    if btn.callback_data and btn.callback_data.startswith("person_edit_"):
                        try:
                            current_id = int(btn.callback_data.split('_')[-1])
                        except Exception:
                            pass
        idx = next((i for i, p in enumerate(persons) if p.id == current_id), 0)
        prev_idx = (idx - 1) % len(persons)
        person = persons[prev_idx]
        caption = f"<b>{person.last_name} {person.first_name}</b>\n{person.position or ''}\n‚òéÔ∏è {person.contact or '‚Äî'}"
        if person.file_id:
            from aiogram.types import InputMediaPhoto
            await callback.message.edit_media(InputMediaPhoto(media=person.file_id, caption=caption, parse_mode="HTML"), reply_markup=get_admin_pagination_kb('person', person.id))
        else:
            await callback.message.edit_text(caption, reply_markup=get_admin_pagination_kb('person', person.id), parse_mode="HTML")
        await callback.answer()


@admin_router.callback_query(F.data.startswith("person_next"))
async def person_next_page(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        persons = await dao.get_all_persons()
        if not persons:
            await callback.answer("–ù–µ—Ç –ª—é–¥–µ–π.")
            return
        current_id = None
        if callback.message.reply_markup and callback.message.reply_markup.inline_keyboard:
            for row in callback.message.reply_markup.inline_keyboard:
                for btn in row:
                    if btn.callback_data and btn.callback_data.startswith("person_edit_"):
                        try:
                            current_id = int(btn.callback_data.split('_')[-1])
                        except Exception:
                            pass
        idx = next((i for i, p in enumerate(persons) if p.id == current_id), 0)
        next_idx = (idx + 1) % len(persons)
        person = persons[next_idx]
        caption = f"<b>{person.last_name} {person.first_name}</b>\n{person.position or ''}\n‚òéÔ∏è {person.contact or '‚Äî'}"
        if person.file_id:
            from aiogram.types import InputMediaPhoto
            await callback.message.edit_media(InputMediaPhoto(media=person.file_id, caption=caption, parse_mode="HTML"), reply_markup=get_admin_pagination_kb('person', person.id))
        else:
            await callback.message.edit_text(caption, reply_markup=get_admin_pagination_kb('person', person.id), parse_mode="HTML")
        await callback.answer()


# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ ======
@admin_router.callback_query(F.data == "person_add")
async def person_add_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminAddPerson.last_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞:")
    await callback.answer()


@admin_router.message(AdminAddPerson.last_name)
async def person_add_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await state.set_state(AdminAddPerson.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞:")


@admin_router.message(AdminAddPerson.first_name)
async def person_add_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(AdminAddPerson.position)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@admin_router.message(AdminAddPerson.position)
async def person_add_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(AdminAddPerson.contact)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@admin_router.message(AdminAddPerson.contact)
async def person_add_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(AdminAddPerson.file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@admin_router.message(AdminAddPerson.file_id)
async def person_add_file(message: types.Message, state: FSMContext):
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    await state.update_data(file_id=file_id)
    person_data = await state.get_data()

    async with async_session_maker() as session:
        dao = DAO(session)
        await dao.add_person(**person_data)
    await message.answer("–ß–µ–ª–æ–≤–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω! üë§")
    await state.clear()


# ====== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ ======
@admin_router.callback_query(F.data.startswith("person_edit_"))
async def person_edit_start(callback: types.CallbackQuery, state: FSMContext):

    async with async_session_maker() as session:
        dao = DAO(session)
        person_id = int(callback.data.split('_')[-1])
        person = await dao.get_person(person_id)
        if not person:
            await callback.answer("–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        await state.update_data(person_id=person_id)
        await state.set_state(AdminEditPerson.last_name)
        await callback.message.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ç–µ–∫—É—â–∞—è —Ñ–∞–º–∏–ª–∏—è ‚Äî {person.last_name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
        await callback.answer()


@admin_router.message(AdminEditPerson.last_name)
async def person_edit_last_name(message: types.Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await state.set_state(AdminEditPerson.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")


@admin_router.message(AdminEditPerson.first_name)
async def person_edit_first_name(message: types.Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(AdminEditPerson.position)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@admin_router.message(AdminEditPerson.position)
async def person_edit_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(AdminEditPerson.contact)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@admin_router.message(AdminEditPerson.contact)
async def person_edit_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await state.set_state(AdminEditPerson.file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª/—Ñ–æ—Ç–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):")


@admin_router.message(AdminEditPerson.file_id)
async def person_edit_file(message: types.Message, state: FSMContext):
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    await state.update_data(file_id=file_id)
    data = await state.get_data()
    person_id = data.get('person_id')
    update_data = {k: v for k, v in data.items() if k != 'person_id'}

    async with async_session_maker() as session:
        dao = DAO(session)
        # await dao.update_person(person_id, **update_data)
    await message.answer("–î–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! ‚úèÔ∏è")
    await state.clear()


# ====== –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ ======
@admin_router.callback_query(F.data.startswith("person_delete_"))
async def person_delete(callback: types.CallbackQuery):

    async with async_session_maker() as session:
        dao = DAO(session)
        person_id = int(callback.data.split('_')[-1])
        await dao.delete_person(person_id)
        await callback.message.edit_text("–ß–µ–ª–æ–≤–µ–∫ —É–¥–∞–ª—ë–Ω! üóëÔ∏è")
        await callback.answer()


# ====== FAQ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ======
@admin_router.message(F.text == "‚úèÔ∏è FAQ")
async def show_faq_admin(message: types.Message):
    async with async_session_maker() as session:
        dao = DAO(session)
        faqs = await dao.get_all_faq()
        if not faqs:
            await message.answer("FAQ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ‚ûï —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.", reply_markup=faq_admin_kb)
            return
        text = "<b>FAQ</b>\n\n"
        for idx, faq in enumerate(faqs, 1):
            text += f"<b>{idx}. ‚ùì {faq.question}</b>\n<blockquote>{faq.answer}</blockquote>\n\n"
        text += "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
        await message.answer(text, parse_mode="HTML", reply_markup=faq_admin_kb)

# ====== FAQ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —é–∑–µ—Ä–∞ ======
@admin_router.message(F.text == "FAQ ‚ùì")
async def show_faq_user(message: types.Message):
    async with async_session_maker() as session:
        dao = DAO(session)
        faqs = await dao.get_all_faq()
        if not faqs:
            await message.answer("FAQ –ø—É—Å—Ç.")
            return
        faq = faqs[0]
        text = f"<b>{faq.question}</b>\n<blockquote>{faq.answer}</blockquote>"
        await message.answer(text, parse_mode="HTML", reply_markup=None)

# ====== FAQ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ======
@admin_router.callback_query(F.data == "faq_add")
async def faq_add_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminAddFAQ.question)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å FAQ:")
    await callback.answer()

@admin_router.message(AdminAddFAQ.question)
async def faq_add_question(message: types.Message, state: FSMContext):
    await state.update_data(question=message.text)
    await state.set_state(AdminAddFAQ.answer)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")

# ====== FAQ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ======
@admin_router.message(AdminAddFAQ.answer)
async def faq_add_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question = data.get("question")
    answer = message.text
    async with async_session_maker() as session:
        dao = DAO(session)
        await dao.add_faq(question, answer)
    await state.clear()
    await message.answer("FAQ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_edit_kb)

# ====== FAQ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –Ω–æ–º–µ—Ä–∞) ======
@admin_router.callback_query(F.data == "faq_edit")
async def faq_edit_start(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        faqs = await dao.get_all_faq()
        if not faqs:
            await callback.answer("FAQ –ø—É—Å—Ç. –ù–∏—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
            return
        text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        for idx, faq in enumerate(faqs, 1):
            text += f"{idx}. {faq.question}\n"
        await callback.message.answer(text, parse_mode="HTML")
        await state.set_state(AdminEditFAQ.select_number)
        await state.update_data(faqs=[{'id': f.id, 'question': f.question, 'answer': f.answer} for f in faqs])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await callback.answer()

@admin_router.message(AdminEditFAQ.select_number)
async def faq_edit_select_number(message: types.Message, state: FSMContext):
    if message.text and message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_edit_kb)
        return
    data = await state.get_data()
    faqs = data.get('faqs', [])
    try:
        idx = int(message.text.strip()) - 1
        if idx < 0 or idx >= len(faqs):
            raise IndexError
        faq = faqs[idx]
        await state.update_data(faq_id=faq['id'], current_question=faq['question'], current_answer=faq['answer'])
        await state.set_state(AdminEditFAQ.question)
        await message.answer(f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {faq['question']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å :")
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FAQ: {e}")
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")

@admin_router.message(AdminEditFAQ.question)
async def faq_edit_question(message: types.Message, state: FSMContext):
    if message.text and message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_edit_kb)
        return
    question = message.text.strip() if message.text.strip() else (await state.get_data()).get('current_question')
    await state.update_data(question=question)
    await state.set_state(AdminEditFAQ.answer)
    current_answer = (await state.get_data()).get('current_answer')
    await message.answer(f"–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: {current_answer}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç :")

@admin_router.message(AdminEditFAQ.answer)
async def faq_edit_answer(message: types.Message, state: FSMContext):
    if message.text and message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_edit_kb)
        return
    answer = message.text.strip() if message.text.strip() else (await state.get_data()).get('current_answer')
    data = await state.get_data()
    faq_id = data.get('faq_id')
    async with async_session_maker() as session:
        dao = DAO(session)
        await dao.update_faq(faq_id, question=data['question'], answer=answer)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –≤ DAO –µ—Å—Ç—å –º–µ—Ç–æ–¥ update_faq(id, question, answer)
    await state.clear()
    await message.answer("FAQ –æ–±–Ω–æ–≤–ª—ë–Ω! ‚úèÔ∏è", reply_markup=admin_edit_kb)

# ====== FAQ: —É–¥–∞–ª–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ª—É—á—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞) ======
@admin_router.callback_query(F.data == "faq_delete")
async def faq_delete_start(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        faqs = await dao.get_all_faq()
        if not faqs:
            await callback.answer("FAQ –ø—É—Å—Ç.")
            return
        text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä FAQ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        for idx, faq in enumerate(faqs, 1):
            text += f"{idx}. {faq.question}\n"
        await callback.message.answer(text, parse_mode="HTML")
        await state.set_state(AdminDeleteFAQ.select_number)  # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(faqs=[{'id': f.id, 'question': f.question} for f in faqs])
    await callback.answer()

@admin_router.message(AdminDeleteFAQ.select_number)
async def faq_delete_confirm(message: types.Message, state: FSMContext):
    if message.text and message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_edit_kb)
        return

    data = await state.get_data()
    faqs = data.get('faqs', [])
    try:
        idx = int(message.text.strip()) - 1
        if idx < 0 or idx >= len(faqs):
            raise IndexError
        faq_id = faqs[idx]['id']
        async with async_session_maker() as session:
            dao = DAO(session)
            await dao.delete_faq(faq_id)
        await state.clear()
        await message.answer("FAQ —É–¥–∞–ª—ë–Ω! üóëÔ∏è", reply_markup=admin_edit_kb)
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ü–µ—Ä–µ–æ—Ç–æ–±—Ä–∞–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π FAQ
        await show_faq_admin(message)  # –ß—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ FAQ: {e}")
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–∏–∏ FAQ: {e}")
        await state.clear()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –ù–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å ---
reply_waiting = {}

@admin_router.callback_query(F.data.startswith("answer_"))
async def admin_answer_start(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in ADMINS_LIST:
        await callback.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å!", show_alert=True)
        return
    user_id = int(callback.data.split('_')[1])
    # –ü–æ–ª—É—á–∞–µ–º question_id –∏–∑ –±–∞–∑—ã –ø–æ user_id –∏ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞
    question_id = None
    async with async_session_maker() as session:
        dao = DAO(session)
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        questions = await dao.get_questions_by_user(user_id)
        for q in reversed(questions):
            if not q.answer:
                question_id = q.id
                break
    question_text = callback.message.text
    reply_waiting[admin_id] = {
        "user_id": user_id,
        "chat_id": callback.message.chat.id,
        "message_id": callback.message.message_id,
        "question_text": question_text,
        "question_id": question_id
    }
    await callback.bot.send_message(
        admin_id,
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_reply_{user_id}")]]
        )
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("cancel_reply_"))
async def cancel_reply(callback: types.CallbackQuery):
    reply_waiting.pop(callback.from_user.id, None)
    await callback.message.edit_text("–û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞.")
    await callback.answer()

@admin_router.message()
async def admin_answer_send(message: types.Message):
    if message.chat.type != "private" or message.from_user.id not in ADMINS_LIST:
        return
    waiting = reply_waiting.get(message.from_user.id)
    if not waiting:
        return
    user_id = waiting["user_id"]
    question_id = waiting.get("question_id")
    answer_text = message.text
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã
    async with async_session_maker() as session:
        dao = DAO(session)
        question_obj = await dao.get_question(question_id) if question_id else None
    if question_obj:
        question_text = question_obj.question
    else:
        question_text = ""
    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ü–∏—Ç–∞—Ç—ã
    user_msg = (
        f"–¢–µ–±–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å!\n\n"
        f"<blockquote>{question_text}</blockquote>\n\n"
        f"–û—Ç–≤–µ—Ç:\n<blockquote>{answer_text}</blockquote>"
    )
    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    chat_username = getattr(question_obj, 'username', None) or 'user'
    chat_msg = (
        f"–í–æ–ø—Ä–æ—Å–∏–∫ –æ—Ç @{chat_username} –∑–∞–∫—Ä—ã—Ç:\n\n"
        f"–í–æ–ø—Ä–æ—Å:\n<blockquote>{question_text}</blockquote>\n\n"
        f"–û—Ç–≤–µ—Ç:\n<blockquote>{answer_text}</blockquote>\n\n"
        f"–û—Ç–≤–µ—Ç–∏–ª @{message.from_user.username or 'admin'}"
    )
    import logging
    try:
        await message.bot.send_message(user_id, user_msg, parse_mode="HTML")
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: user_id={user_id}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. user_id={user_id}")
    try:
        from aiogram.types import InlineKeyboardMarkup
        chat_id = waiting.get("chat_id")
        message_id = waiting.get("message_id")
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, message_id={message_id}")
        await message.bot.edit_message_text(chat_msg, chat_id=chat_id, message_id=message_id, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} (message_id={message_id}): {e}")
        await message.answer(f"‚ùóÔ∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å chat_id/message_id.\nchat_id={chat_id}, message_id={message_id}")
    reply_waiting.pop(message.from_user.id, None)

