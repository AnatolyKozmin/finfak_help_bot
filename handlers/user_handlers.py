import logging
logging.basicConfig(level=logging.INFO)

from aiogram import F, types, Router
from aiogram.filters import CommandStart

from sqlalchemy.ext.asyncio import AsyncSession
from database.engine import async_session_maker
from database.dao import DAO

from filters.chat_type import ChatTypeFilter
from keyboard.reply import user_default_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

user_router = Router()
user_router.message.filter(ChatTypeFilter(["private"]))


class UserAskQuestion(StatesGroup):
    anon_choice = State()
    question = State()


WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —Å–≤—è–∑–∏ –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞!\n"
    "–≠—Ç–æ—Ç –±–æ—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞–º–∏, ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.\n\n"
    "–°—é–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å –ª—é–±–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π, —Å–æ—Ö—Ä–∞–Ω—è—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É.\n"
    "–¢–∞–∫–∂–µ –±–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è. –í—Å—ë —Å–æ–±—Ä–∞–Ω–æ –∑–¥–µ—Å—å, –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É!"
)


@user_router.message(CommandStart())
async def start_cmd(message: types.Message):
    async with async_session_maker() as session:
        dao = DAO(session)

        await dao.add_user(
            tg_id=message.from_user.id,
            username=message.from_user.username
        )

    await message.answer(text=WELCOME_TEXT, reply_markup=user_default_kb)


# ====== FAQ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º) ======
@user_router.message(F.text == "FAQ ‚ùì")
async def show_faq_user(message: types.Message):
    async with async_session_maker() as session:
        dao = DAO(session)
        faqs = await dao.get_all_faq()
        if not faqs:
            await message.answer("FAQ –ø—É—Å—Ç.", reply_markup=user_default_kb)
            return
        text = "<b>FAQ</b>\n\n"
        for idx, faq in enumerate(faqs, 1):
            text += f"<b>{idx}. ‚ùì {faq.question}</b>\n<blockquote>{faq.answer}</blockquote>\n\n"
        await message.answer(text, parse_mode="HTML")


# ====== –û –Ω–∞—Å: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—é–¥–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–æ—Ç–æ ======
def get_person_pagination_kb(current_idx, total):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    buttons = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"user_person_prev_{current_idx}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"user_person_next_{current_idx}")
    ]
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


@user_router.message(F.text == "O –Ω–∞—Å ‚ÑπÔ∏è")
async def show_persons_user(message: types.Message):
    async with async_session_maker() as session:
        dao = DAO(session)
        persons = await dao.get_all_persons()
        if not persons:
            await message.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª—é–¥—è—Ö.", reply_markup=user_default_kb)
            return
        idx = 0
        person = persons[idx]
        kb = get_person_pagination_kb(idx, len(persons))
        text = f"<b>{person.last_name} {person.first_name}</b>\n{person.position or ''}\n‚òéÔ∏è {person.contact or '‚Äî'}"
        if getattr(person, 'file_id', None):
            await message.answer_photo(person.file_id, caption=text, reply_markup=kb or user_default_kb, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=kb or user_default_kb)


@user_router.callback_query(F.data.startswith("user_person_prev_"))
async def user_person_prev_page(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        persons = await dao.get_all_persons()
        if not persons:
            await callback.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª—é–¥—è—Ö.")
            return
        current_idx = int(callback.data.split('_')[-1])
        prev_idx = max(current_idx - 1, 0)
        person = persons[prev_idx]
        kb = get_person_pagination_kb(prev_idx, len(persons))
        text = f"<b>{person.last_name} {person.first_name}</b>\n{person.position or ''}\n‚òéÔ∏è {person.contact or '‚Äî'}"
        if getattr(person, 'file_id', None):
            from aiogram.types import InputMediaPhoto
            await callback.message.edit_media(InputMediaPhoto(media=person.file_id, caption=text, parse_mode="HTML"), reply_markup=kb or user_default_kb)
        else:
            await callback.message.edit_text(text, reply_markup=kb or user_default_kb, parse_mode="HTML")
        await callback.answer()


@user_router.callback_query(F.data.startswith("user_person_next_"))
async def user_person_next_page(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        persons = await dao.get_all_persons()
        if not persons:
            await callback.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª—é–¥—è—Ö.")
            return
        current_idx = int(callback.data.split('_')[-1])
        next_idx = min(current_idx + 1, len(persons) - 1)
        person = persons[next_idx]
        kb = get_person_pagination_kb(next_idx, len(persons))
        text = f"<b>{person.last_name} {person.first_name}</b>\n{person.position or ''}\n‚òéÔ∏è {person.contact or '‚Äî'}"
        if getattr(person, 'file_id', None):
            from aiogram.types import InputMediaPhoto
            await callback.message.edit_media(InputMediaPhoto(media=person.file_id, caption=text, parse_mode="HTML"), reply_markup=kb or user_default_kb)
        else:
            await callback.message.edit_text(text, reply_markup=kb or user_default_kb, parse_mode="HTML")
        await callback.answer()


# ====== –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–æ—Ç–æ ======
def get_event_pagination_kb(current_idx, total):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    buttons = []
    # –ö–Ω–æ–ø–∫–∏ –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ–¥–Ω–æ
    buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"user_event_prev_{current_idx}"))
    buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"user_event_next_{current_idx}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


@user_router.message(F.text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üíº")
async def show_events_user(message: types.Message):
    async with async_session_maker() as session:
        dao = DAO(session)
        events = await dao.get_all_events()
        if not events:
            await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=user_default_kb)
            return
        idx = 0
        event = events[idx]
        kb = get_event_pagination_kb(idx, len(events))
        caption = f"<b>{event.title}</b>\n{event.description}\nüìÖ {event.date.strftime('%d.%m.%Y %H:%M')}\nüìç {event.location}"
        if getattr(event, 'file_id', None):
            await message.answer_photo(event.file_id, caption=caption, reply_markup=kb, parse_mode="HTML")
        else:
            await message.answer(caption, reply_markup=kb, parse_mode="HTML")


@user_router.callback_query(F.data.startswith("user_event_prev_"))
async def user_event_prev_page(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        events = await dao.get_all_events()
        if not events:
            await callback.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return
        current_idx = int(callback.data.split('_')[-1])
        prev_idx = max(current_idx - 1, 0)
        if prev_idx == current_idx:
            await callback.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.")
            return
        event = events[prev_idx]
        kb = get_event_pagination_kb(prev_idx, len(events))
        caption = f"<b>{event.title}</b>\n{event.description}\nüìÖ {event.date.strftime('%d.%m.%Y %H:%M')}\nüìç {event.location}"
        if getattr(event, 'file_id', None):
            from aiogram.types import InputMediaPhoto
            await callback.message.edit_media(InputMediaPhoto(media=event.file_id, caption=caption, parse_mode="HTML"), reply_markup=kb or user_default_kb)
        else:
            await callback.message.edit_text(caption, reply_markup=kb or user_default_kb, parse_mode="HTML")
        await callback.answer()


@user_router.callback_query(F.data.startswith("user_event_next_"))
async def user_event_next_page(callback: types.CallbackQuery, state: FSMContext):
    async with async_session_maker() as session:
        dao = DAO(session)
        events = await dao.get_all_events()
        if not events:
            await callback.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return
        current_idx = int(callback.data.split('_')[-1])
        next_idx = min(current_idx + 1, len(events) - 1)
        if next_idx == current_idx:
            await callback.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.")
            return
        event = events[next_idx]
        kb = get_event_pagination_kb(next_idx, len(events))
        caption = f"<b>{event.title}</b>\n{event.description}\nüìÖ {event.date.strftime('%d.%m.%Y %H:%M')}\nüìç {event.location}"
        if getattr(event, 'file_id', None):
            from aiogram.types import InputMediaPhoto
            await callback.message.edit_media(InputMediaPhoto(media=event.file_id, caption=caption, parse_mode="HTML"), reply_markup=kb or user_default_kb)
        else:
            await callback.message.edit_text(caption, reply_markup=kb or user_default_kb, parse_mode="HTML")
        await callback.answer()


@user_router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è")
async def ask_question_start(message: types.Message, state: FSMContext):
    await state.set_state(UserAskQuestion.anon_choice)
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω–æ"), KeyboardButton(text="–ù–µ–∞–Ω–æ–Ω–∏–º–Ω–æ")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω–æ?", reply_markup=kb)


@user_router.message(UserAskQuestion.anon_choice)
async def ask_question_anon_choice(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    if text == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=user_default_kb)
        return
    if text not in ["–∞–Ω–æ–Ω–∏–º–Ω–æ", "–Ω–µ–∞–Ω–æ–Ω–∏–º–Ω–æ"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=user_default_kb)
        return
    await state.update_data(is_anon=(text == "–∞–Ω–æ–Ω–∏–º–Ω–æ"))
    await state.set_state(UserAskQuestion.question)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=None)


@user_router.message(UserAskQuestion.question)
async def ask_question_collect(message: types.Message, state: FSMContext):
    if message.text.strip().lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=user_default_kb)
        return
    data = await state.get_data()
    is_anon = data.get("is_anon", True)
    question_text = message.text
    username = message.from_user.username
    group_chat_id = -1002698035579
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{message.from_user.id}")]])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
    async with async_session_maker() as session:
        dao = DAO(session)
        question_obj = await dao.add_question(
            user_id=message.from_user.id,
            username=username,
            question=question_text,
            is_anon=is_anon
        )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –≤ –±–∞–∑—É ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    group_msg = (
        f"<b>üìù –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!</b>\n"
        f"<b>üë§ –û—Ç:</b> <i>{username}</i> {'(–∞–Ω–æ–Ω–∏–º–Ω–æ)' if is_anon else ''}\n"
        f"<b>‚ùì –í–æ–ø—Ä–æ—Å:</b>\n<blockquote>{question_text}</blockquote>\n\n"
        f"<i>–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá</i>"
    )
    import logging
    from aiogram.exceptions import TelegramNetworkError
    try:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É: chat_id={group_chat_id}, user={username}, anon={is_anon}")
        await message.bot.send_message(group_chat_id, group_msg, parse_mode="HTML", reply_markup=kb)
    except TelegramNetworkError as e:
        logging.error(f"TelegramNetworkError –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.clear()
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=user_default_kb)



